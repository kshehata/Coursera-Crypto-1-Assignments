#include "blocks.h"

#include <gtest/gtest.h>
#include <utility>

using std::tuple;
using ::testing::TestWithParam;
using ::testing::Values;

namespace testing {


class CheckRemovePadTest : 
    public TestWithParam<tuple<bool, string, string>> {

 protected:
  ~CheckRemovePadTest() override {}
  void SetUp() override {}
  void TearDown() override {}
};

TEST_P(CheckRemovePadTest, Examples) {
  const auto exp_success = get<0>(GetParam());
  auto in = get<1>(GetParam());
  const auto& exp = get<2>(GetParam());
  bool result = check_and_remove_pad(in);
  EXPECT_EQ(result, exp_success);
  if (exp_success) {
    EXPECT_EQ(in, exp);
  }
}

INSTANTIATE_TEST_SUITE_P(CheckRemovePadTestExamples,
                         CheckRemovePadTest,
                         testing::Values(
                          make_tuple(true, string{}, string{}),
                          make_tuple(true,
                            string{
                              0x7A, 0x55, 0x7A, 0x55, 0x7A, 0x55, 0x7A, 0x01},
                            string{
                              0x7A, 0x55, 0x7A, 0x55, 0x7A, 0x55, 0x7A}),
                          make_tuple(true,
                            string{
                              0x7A, 0x55, 0x7A, 0x55, 0x7A, 0x55, 0x7A, 0x55,
                              0x7A, 0x55, 0x7A, 0x55, 0x04, 0x04, 0x04, 0x04},
                            string{
                              0x7A, 0x55, 0x7A, 0x55, 0x7A, 0x55, 0x7A, 0x55,
                              0x7A, 0x55, 0x7A, 0x55}),
                          make_tuple(false, string{0x04, 0x04},
                            string{}),
                          make_tuple(false, string{
                            0x7A, 0x55, 0x7A, 0x55, 0x04, 0x04, 0x05, 0x04},
                            string{}),
                          make_tuple(false, string{
                            0x7A, 0x55, 0x7A, 0x55, 0x03, 0x04, 0x04, 0x04},
                            string{})
                          ));

TEST(DecryptCBCTest, Decrypt) {
  const byte_array key = {
    0x14, 0x0b, 0x41, 0xb2, 0x2a, 0x29, 0xbe, 0xb4,
    0x06, 0x1b, 0xda, 0x66, 0xb6, 0x74, 0x7e, 0x14};

  const byte_array ct = {
    0x4c, 0xa0, 0x0f, 0xf4, 0xc8, 0x98, 0xd6, 0x1e,
    0x1e, 0xdb, 0xf1, 0x80, 0x06, 0x18, 0xfb, 0x28,
    0x28, 0xa2, 0x26, 0xd1, 0x60, 0xda, 0xd0, 0x78,
    0x83, 0xd0, 0x4e, 0x00, 0x8a, 0x78, 0x97, 0xee,
    0x2e, 0x4b, 0x74, 0x65, 0xd5, 0x29, 0x0d, 0x0c,
    0x0e, 0x6c, 0x68, 0x22, 0x23, 0x6e, 0x1d, 0xaa,
    0xfb, 0x94, 0xff, 0xe0, 0xc5, 0xda, 0x05, 0xd9,
    0x47, 0x6b, 0xe0, 0x28, 0xad, 0x7c, 0x1d, 0x81
  };
  const string exp = "Basic CBC mode encryption needs padding.";
  const auto result = decrypt_cbc(key, ct);
  EXPECT_EQ(exp, result);
}

} // namespace testing
